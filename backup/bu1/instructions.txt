Goal:
1. The goal is to find all index in qram in which the value is similar enough to omega
2. All values in the qram (not the index) are generated from amplitude encoding of a classical vector so the values are in superposition. This is also the case for omega
3. The grover starts with equal superposition which represents the index (addresses of the qram)
4. For each index, grover's oracle retrieve the corresponding value from the qram
5. It checks the retrieved data against omega using swap_test. If ancilla is 0 (value is the same as omega), flip the index
6. Amplify the amplitude of the marked index
7. Measure the returned index and done

Components:
1. QRAM - dictionary-like structure that maps index to value. The value is ALWAYS in superposition because it is
generated from amplitude encoding of a classical vector. Qram must have a function to load a python dictionary into it so that i can initialize it before starting the searching. Note that this dictionary should be discarded after the loading and should not be used in the quantum world (because it doesn't exist there)
2. Swap test - a quantum circuit that performs the swap test. It takes two qubits and an ancilla qubit. The first qubit is the one to be compared, the second qubit is the one to be compared against, and the ancilla qubit is used to store the result of the comparison. 
3. Grover's algorithm - combine qram with swap test to perform the main task. It starts with equal superposition of all indices, then for each index, it retrieves the corresponding value from the qram and performs the swap test against omega. If the result is 0, it flips the index. Finally, it amplifies the amplitude of the marked indices and measures the returned index.

Other specifications:
1. The entire thing has to be implemented using the latest version of PennyLane
2. The code has to be modular and reusable. The QRAM, Swap test, and Grover's algorithm should be implemented as separate classes and files. Grover's file can import swap test and the main.py file can import grover and qram. this is important because in the main file, I will 
3. As a test you can use this example in the main.py file but do not use dummy data anywhere else apart from the test:
database = {
    "00": [0.3, 0.1, 0.1, 0.5], (00 is the index and the value is the classical vector that should be amplitude encoded)
    "01": [0.1, 0.2, 0.3, 0.4],
    "10": [0.5, 0.2, 0.1, 0.2],
    "11": [0.2, 0.3, 0.4, 0.1]
}
omega = [0.1, 0.2, 0.3, 0.4]

Run and debug until it works.
